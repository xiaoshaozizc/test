void CVT(cv::Mat ori_16, int rows, int cols, imageInfo &image)
{
	cv::Mat obj(rows, cols, CV_8UC1);
	if (out16bit.empty())
		return;

	//std::cout << "ave_pixel " << std::endl;
	double ave_pixel = 0;

	for (int i = 0; i < rows; ++i)
	{
		for (int j = 0; j < cols; ++j)
		{

			unsigned short pixv = out16bit.at<unsigned short>(i, j);
			if (pixv > maxv)
				maxv = pixv;
			if (pixv < minv)
				minv = pixv;
			ave_pixel += pixv;
		}
	}

	//计算平均灰度
	ave_pixel = ave_pixel / (rows*cols);

	//std::cout << "ave_pixel " << ave_pixel << std::endl;

	//线性变换
#if 1
	double a = 0.6;//变换系数
	double b = 123 - a*ave_pixel;

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{

			double pix = a*out16bit.at<unsigned short>(i, j) + b;

			if (pix > 255)
			{
				obj.at<unsigned char>(i, j) = 255;

			}
			else if (pix<0)
			{
				obj.at<unsigned char>(i, j) = 0;
			}
			else
			{
				obj.at<unsigned char>(i, j) = pix;
			}
		}
	}
	

	/*std::cout << "maxv: " << maxv << std::endl;
	std::cout << "minv: " << minv << std::endl;*/
#endif
	image.oriIMG8bit = obj;

	int index = 3 +rows * cols;// image_info.oriIMG8bit.rows*image_info.oriIMG8bit.cols;
	int direction1 = ori_16.data[index + 1] * 65536 + ori_16.data[index];// (((uchar)data[index + 3] * 256 + (uchar)data[index + 2]) * 256 + (uchar)data[index + 1]) * 256 + (uchar)data[index];
	index += 2;
	int direction2 = (ori_16.data[index + 1] << 16) | (ori_16.data[index]); //(int)((data[index + 3] << 24) | (data[index + 2] << 16) | (data[index + 1] << 8) | data[index]);//(((uchar)data[index+3] * 256 + (uchar)data[index + 2]) * 256 + (uchar)data[index + 1]) * 256 + (uchar)data[index];
	/*std::cout << (int)data[index + 1] << " " << (int)data[index] << " ";
	std::cout << direction2 << std::endl;*/
	index += 2;

	int direction3 = ori_16.data[index + 1] * 65536 + ori_16.data[index];// (((uchar)data[index + 3] * 256 + (uchar)data[index + 2]) * 256 + (uchar)data[index + 1]) * 256 + (uchar)data[index];
	index += 2;
	int direction4 = ori_16.data[index + 1] * 65536 + ori_16.data[index]; //(((uchar)data[index + 3] * 256 + (uchar)data[index + 2]) * 256 + (uchar)data[index + 1]) * 256 + (uchar)data[index];
	image_info.directionInfo.clear();
	image_info.directionInfo.push_back(direction1);
	image_info.directionInfo.push_back(direction2);
	image_info.directionInfo.push_back(direction3);
	image_info.directionInfo.push_back(direction4);

}